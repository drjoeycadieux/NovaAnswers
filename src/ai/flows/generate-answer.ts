// This file holds the Genkit flow for generating answers to user questions.

'use server';

/**
 * @fileOverview This file defines a Genkit flow that takes a user's question as input and returns a comprehensive answer generated by an AI.
 *
 * - generateAnswer - The function to call to generate an answer to a question.
 * - GenerateAnswerInput - The input type for the generateAnswer function.
 * - GenerateAnswerOutput - The output type for the generateAnswer function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

// Define the input schema for the flow
const GenerateAnswerInputSchema = z.object({
  question: z.string().describe('The question to be answered.'),
});
export type GenerateAnswerInput = z.infer<typeof GenerateAnswerInputSchema>;

// Define the output schema for the flow
const GenerateAnswerOutputSchema = z.object({
  answer: z.string().describe('The comprehensive answer generated by the AI.'),
  sources: z.array(z.string()).optional().describe('Sources used to compose the answer, if available'),
});
export type GenerateAnswerOutput = z.infer<typeof GenerateAnswerOutputSchema>;

// Define the main function that will be called to start the flow
export async function generateAnswer(input: GenerateAnswerInput): Promise<GenerateAnswerOutput> {
  return generateAnswerFlow(input);
}

// Define the prompt
const generateAnswerPrompt = ai.definePrompt({
  name: 'generateAnswerPrompt',
  input: {schema: GenerateAnswerInputSchema},
  output: {schema: GenerateAnswerOutputSchema},
  prompt: `You are a helpful AI assistant. Please provide a comprehensive and informative answer to the following question:

Question: {{{question}}}

If possible, please list the sources you used to compose your answer.`,
});

// Define the flow
const generateAnswerFlow = ai.defineFlow(
  {
    name: 'generateAnswerFlow',
    inputSchema: GenerateAnswerInputSchema,
    outputSchema: GenerateAnswerOutputSchema,
  },
  async input => {
    const {output} = await generateAnswerPrompt(input);
    return output!;
  }
);
